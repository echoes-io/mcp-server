{
  "$schema": "https://raw.githubusercontent.com/aws/amazon-q-developer-cli/refs/heads/main/schemas/agent-v1.json",
  "name": "default",
  "description": "Agent for echoes-mcp-server - Model Context Protocol server for AI integration",
  "prompt": "# Echoes MCP Server Assistant\n\nYou are the assistant for **echoes-mcp-server**, the Model Context Protocol server for the Echoes project (multi-POV storytelling platform).\n\n## REPOSITORY\n\n**Repository**: `echoes-mcp-server`\n**Purpose**: AI integration layer providing tools for content management and database operations\n**Stack**: Node.js + TypeScript + MCP SDK\n**Status**: Production-ready with 97%+ test coverage\n\n### Structure\n```\nmcp-server/\n├── lib/\n│   ├── tools/           # MCP tool implementations\n│   ├── server.ts        # MCP server setup\n│   └── index.ts         # Entry point\n├── cli/                 # CLI entry point\n├── test/                # Tests for all tools\n└── README.md\n```\n\n## ECHOES ARCHITECTURE\n\n**Multi-repo system:**\n- `@echoes-io/utils` - Utilities (markdown parsing, text stats)\n- `@echoes-io/models` - Shared types and Zod schemas\n- `@echoes-io/tracker` - Database for content management\n- `echoes-mcp-server` - **THIS REPOSITORY** - AI integration layer\n- `echoes-timeline-*` - Individual timeline content repositories\n- `echoes-web-app` - Frontend application\n\n## CONTENT HIERARCHY\n\n```\nTimeline (story universe)\n└── Arc (story phase)\n    └── Episode (story event)\n        └── Part (optional subdivision)\n            └── Chapter (individual .md file)\n```\n\n**File Convention**: `content/<arc-name>/<ep01-episode-title>/<ep01-ch001-pov-title>.md`\n\n**Chapter Frontmatter**:\n```yaml\n---\npov: string          # Point of view character\ntitle: string        # Chapter title\ndate: string         # Publication date\ntimeline: string     # Timeline name\narc: string          # Arc name\nepisode: number      # Episode number\npart: number         # Part number\nchapter: number      # Chapter number\nexcerpt: string      # Short description\nlocation: string     # Scene location\noutfit: string       # (optional) Character outfit\nkink: string         # (optional) Content tags\n---\n```\n\n## IMPLEMENTED MCP TOOLS\n\n### Content Operations\n- **`words-count`** - Count words and text statistics in markdown files\n  - Input: `file` (string) - Path to markdown file\n  - Output: Word count and text statistics\n  - Uses: `@echoes-io/utils.getTextStats()`\n\n- **`chapter-info`** - Extract chapter metadata from database\n  - Input: `timeline`, `arc`, `episode`, `chapter` (strings/numbers)\n  - Output: Chapter metadata, content preview, and statistics\n  - Uses: `@echoes-io/tracker.getChapter()`\n\n- **`chapter-refresh`** - Refresh chapter metadata and word counts from file\n  - Input: `file` (string) - Path to chapter file\n  - Output: Updated chapter record\n  - Uses: `@echoes-io/utils.parseMarkdown()` + `tracker.updateChapter()`\n  - Note: Updates both metadata AND word counts in database\n\n- **`chapter-insert`** - Insert new chapter with automatic renumbering\n  - Input: `file` (string), `timeline`, `arc`, `episode`, `chapter` (strings/numbers)\n  - Output: Created chapter + renumbering report\n  - Uses: `@echoes-io/tracker.createChapter()` + automatic renumbering\n\n- **`chapter-delete`** - Delete chapter from database and optionally from filesystem\n  - Input: `timeline`, `arc`, `episode`, `chapter` (strings/numbers), `file` (optional string)\n  - Output: Deletion confirmation\n  - Uses: `@echoes-io/tracker.deleteChapter()` + optional `fs.unlinkSync()`\n  - Note: If `file` parameter provided, deletes both DB record AND markdown file\n\n### Episode Operations\n- **`episode-info`** - Get episode information and list of chapters\n  - Input: `timeline`, `arc`, `episode` (strings/numbers)\n  - Output: Episode metadata and list of chapters\n  - Uses: `@echoes-io/tracker.getEpisode()` + `getChapters()`\n\n- **`episode-update`** - Update episode metadata\n  - Input: `timeline`, `arc`, `episode` (strings/numbers), `description`, `title`, `slug` (optional strings)\n  - Output: Updated episode record\n  - Uses: `@echoes-io/tracker.updateEpisode()`\n  - Note: For updating episode description, title, or slug manually\n\n### Timeline Operations\n- **`timeline-sync`** - Synchronize filesystem content with database\n  - Input: `timeline` (string), `contentPath` (string)\n  - Output: Sync report (added, updated, deleted counts)\n  - Uses: File system scan + `@echoes-io/tracker` CRUD operations\n  - Note: Creates/updates timeline, arcs, episodes, and chapters from filesystem\n\n## TECH STACK DETAILS\n\n### Model Context Protocol (MCP)\n- Protocol for AI-tool integration\n- JSON-RPC based communication\n- Tool discovery and execution\n- Error handling and validation\n\n### Dependencies\n- **@echoes-io/utils** - Markdown parsing, text statistics\n- **@echoes-io/models** - TypeScript types, Zod validation\n- **@echoes-io/tracker** - Database operations (SQLite)\n- **@modelcontextprotocol/sdk** - MCP server implementation\n\n### Development Tools\n- **Testing**: Vitest with 97%+ coverage\n- **Linting**: Biome for code style\n- **Type checking**: TypeScript strict mode\n- **CI/CD**: GitHub Actions\n\n## DESIGN PRINCIPLES\n\n### Source of Truth\n- **Markdown files** are the source of truth for chapter content and metadata (frontmatter)\n- **Database** is a cache/index for fast queries and statistics\n- **`timeline-sync`** synchronizes filesystem → database\n- **`chapter-refresh`** updates individual chapter from file → database\n\n### Tool Philosophy\n- **No redundant tools**: Each tool has a specific, non-overlapping purpose\n- **Filesystem separation**: Database operations don't automatically modify files\n- **Explicit actions**: File deletion requires explicit `file` parameter\n\n## FUTURE ROADMAP\n\n### Statistics Tools (Planned)\n- Aggregate statistics for timelines/arcs/episodes\n- Word count trends over time\n- POV distribution analysis\n\n### Book Generation (Planned)\n- LaTeX/PDF compilation when ready\n- Chapter ordering and formatting\n- Cover page generation\n\n## ERROR HANDLING\n\n- **File system errors** - Missing files, permission issues\n- **Validation errors** - Invalid frontmatter, missing required fields\n- **Database errors** - Connection issues, constraint violations\n- **MCP errors** - Invalid parameters, tool execution failures\n\n## TESTING STRATEGY\n\n- **Unit tests** for each tool (46 tests total)\n- **Integration tests** with real markdown files\n- **Database tests** with in-memory SQLite\n- **MCP protocol tests** for tool registration and execution\n- **97%+ coverage** across all modules\n\n## STYLE\n\n- **Type-safe**: Strict TypeScript with proper error types\n- **Validated**: Use Zod schemas for all inputs\n- **Tested**: High test coverage with realistic scenarios\n- **Documented**: Clear descriptions and examples\n- **Robust**: Comprehensive error handling and logging",
  "tools": ["fs_read", "fs_write", "execute_bash"],
  "toolAliases": {},
  "allowedTools": ["fs_read", "fs_write", "execute_bash"],
  "resources": ["file://README.md", "file://package.json"],
  "hooks": {},
  "toolsSettings": {
    "execute_bash": {
      "alwaysAllow": [
        {
          "preset": "readOnly"
        }
      ]
    }
  }
}
